var g=Object.defineProperty;var u=(s,i,a)=>i in s?g(s,i,{enumerable:!0,configurable:!0,writable:!0,value:a}):s[i]=a;var n=(s,i,a)=>(u(s,typeof i!="symbol"?i+"":i,a),a);(function(){"use strict";class s{constructor(t){n(this,"core",null);n(this,"ffmpeg",null);n(this,"runResolve",null);n(this,"running",!1);n(this,"settings");n(this,"duration",0);n(this,"ratio",0);this.settings=t}async load(){if(this.log("info","load ffmpeg-core"),this.core===null){this.log("info","loading ffmpeg-core");const t=await this.getCreateFFmpegCore(this.settings);this.core=await t.createFFmpegCore({mainScriptUrlOrBlob:t.corePath,printErr:e=>this.parseMessage({type:"fferr",message:e}),print:e=>this.parseMessage({type:"ffout",message:e}),locateFile:(e,r)=>typeof t.wasmPath<"u"&&e.endsWith("ffmpeg-core.wasm")?t.wasmPath:typeof t.workerPath<"u"&&e.endsWith("ffmpeg-core.worker.js")?t.workerPath:r+e}),this.ffmpeg=this.core.cwrap("main","number",["number","number"]),this.log("info","ffmpeg-core loaded")}else throw Error("ffmpeg.wasm was loaded, you should not load it again, use ffmpeg.isLoaded() to check next time.")}writeFile(t,e){if(this.core===null)throw i;{let r=null;try{r=this.core.FS.writeFile(t,e)}catch{throw Error("Oops, something went wrong in FS operation.")}return r}}readFile(t){if(this.core===null)throw i;{let e=null;try{e=this.core.FS.readFile(t)}catch{throw Error(`ffmpeg.FS('readFile', '${t}') error. Check if the path exists`)}return e}}unlink(t){if(this.core===null)throw i;{let e=null;try{e=this.core.FS.unlink(t)}catch{throw Error(`ffmpeg.FS('unlink', '${t}') error. Check if the path exists`)}return e}}async run(...t){if(this.log("info",`run ffmpeg command: ${t.join(" ")}`),this.core===null)throw i;if(this.running)throw Error("ffmpeg.wasm can only run one command at a time");return this.running=!0,new Promise(e=>{const r=[...a,...t].filter(o=>o.length!==0);this.runResolve=e,this.ffmpeg(...s.parseArgs(this.core,r))})}exit(){if(this.core===null)throw i;this.running=!1,this.core.exit(1),this.core=null,this.ffmpeg=null,this.runResolve=null}get isLoaded(){return this.core!==null}parseMessage({type:t,message:e}){this.log(t,e),this.parseProgress(e,this.settings.progress),this.detectCompletion(e)}detectCompletion(t){t==="FFMPEG_END"&&this.runResolve!==null&&(this.runResolve(),this.runResolve=null,this.running=!1)}static parseArgs(t,e){const r=t._malloc(e.length*Uint32Array.BYTES_PER_ELEMENT);return e.forEach((o,c)=>{const f=t._malloc(o.length+1);t.writeAsciiToMemory(o,f),t.setValue(r+Uint32Array.BYTES_PER_ELEMENT*c,f,"i32")}),[e.length,r]}ts2sec(t){const[e,r,o]=t.split(":");return parseFloat(e)*60*60+parseFloat(r)*60+parseFloat(o)}parseProgress(t,e){if(typeof t=="string")if(t.startsWith("  Duration")){const r=t.split(", ")[0].split(": ")[1],o=this.ts2sec(r);e({duration:o,ratio:this.ratio}),(this.duration===0||this.duration>o)&&(this.duration=o)}else if(t.startsWith("frame")||t.startsWith("size")){const r=t.split("time=")[1].split(" ")[0],o=this.ts2sec(r);this.ratio=o/this.duration,e({ratio:this.ratio,time:o})}else t.startsWith("video:")&&(e({ratio:1}),this.duration=0)}log(t,e){this.settings.logger&&this.settings.logger({type:t,message:e}),this.settings.log&&console.log(t,e)}async toBlobURL(t,e){this.log("info",`fetch ${t}`);const r=await(await fetch(t)).arrayBuffer();this.log("info",`${t} file size = ${r.byteLength} bytes`);const o=new Blob([r],{type:e}),c=URL.createObjectURL(o);return this.log("info",`${t} blob URL = ${c}`),c}async getCreateFFmpegCore({corePath:t}){if(typeof t!="string")throw Error("corePath should be a string!");const e=self.location.origin+t,r=await this.toBlobURL(e,"application/javascript"),o=await this.toBlobURL(e.replace("ffmpeg-core.js","ffmpeg-core.wasm"),"application/wasm"),c=await this.toBlobURL(e.replace("ffmpeg-core.js","ffmpeg-core.worker.js"),"application/javascript");return typeof createFFmpegCore>"u"?new Promise(f=>{if(globalThis.importScripts(r),typeof createFFmpegCore>"u")throw Error("CREATE_FFMPEG_CORE_IS_NOT_DEFINED");this.log("info","ffmpeg-core.js script loaded"),f({createFFmpegCore,corePath:r,wasmPath:o,workerPath:c})}):(this.log("info","ffmpeg-core.js script is loaded already"),Promise.resolve({createFFmpegCore,corePath:r,wasmPath:o,workerPath:c}))}}const i=Error("ffmpeg.wasm is not ready, make sure you have completed load()."),a=["./ffmpeg","-nostdin","-y"],l=new s({corePath:"/jext-reborn/ffmpeg-core/ffmpeg-core.js"});onmessage=async h=>{const{audio:t,args:e}=h.data;l.isLoaded||await l.load();const r=crypto.randomUUID();l.writeFile(r,new Uint8Array(t)),await l.run("-i",r,...e,`/${r}.ogg`);const o=l.readFile(`/${r}.ogg`);l.unlink(`/${r}.ogg`),l.unlink(`${r}`),postMessage(o)}})();
